https://app.pluralsight.com/library/courses/using-react-hooks/table-of-contents
https://github.com/pkellner/pluralsight-course-using-react-hooks

https://reactjs.org/docs/getting-started.html
https://reactjs.org/docs/create-a-new-react-app.html


https://app.pluralsight.com/library/courses/building-server-side-rendered-react-apps-beginners/table-of-contents

https://nextjs.org/learn/basics/getting-started
https://nextjs.org/learn/basics/getting-started/setup

lecture note: C:\react\using-react-hooks

==============================================================
Recommended Toolchains
The React team primarily recommends these solutions:

If you’re learning React or creating a new single-page app, use Create React App.
If you’re building a server-rendered website with Node.js, try Next.js.		<<<<<<<<<<< we will use this one.
If you’re building a static content-oriented website, try Gatsby.
If you’re building a component library or integrating with an existing codebase, try More Flexible Toolchains.

------

mkdir hello-next
cd hello-next
npm init -y
npm install --save react react-dom next
mkdir pages

"scripts": {
  "dev": "next",
  "build": "next build",
  "start": "next start"
}

-----------

C:\react\pluralsight-course-using-react-hooks-my-trial>npm init -y
C:\react\pluralsight-course-using-react-hooks-my-trial>npm install --save react react-dom next
C:\react\pluralsight-course-using-react-hooks-my-trial>mkdir pages
C:\react\pluralsight-course-using-react-hooks-my-trial>npm install eslint eslint-plugin-react react-hooks --save-dev
C:\react\pluralsight-course-using-react-hooks-my-trial>npm i bootstrap react-toastify @zeit/next-css
C:\react\pluralsight-course-using-react-hooks-my-trial>npm install eslint-plugin-react-hooks --save-dev

useRef - Primarily used to allow access directly to an element in the DOM.
useEffect - use for componentWillUnmount, componentDidUnmount. React Hook useEffect causes side effects.
useState, is built on top of useReducer with a very thin layer between them.

http://localhost:3000/
http://localhost:3000/ImageChangeOnMouseOver
http://localhost:3000/ImageChangeOnScroll
http://localhost:3000/speakers


https://reactjs.org/docs/hooks-rules.html
Rules of Hooks:
Only Call Hooks at the Top Level
Only Call Hooks from React Functions


ESLint Plugin
npm install eslint-plugin-react-hooks --save-dev
// Your ESLint configuration
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "warn" // Checks effect dependencies
  }
}


Why do we use the new set of hooks:
1. This is going to be our starting point to learn the next four React Hooks, useContext, useReducer, useCallback, and useMemo.
You may be thinking, why bother? Everything works. Are those Hooks just wasting my time?
No, there are two primary things we're going after with these new Hooks. One is performance.
That is, now even though you don't see it, each time we favor a speaker, all the other speakers get rerendered with JavaScript,
meaning that if we had hundreds of speakers, your users of lower power laptops might find their fans coming on and
some ugly unresponsiveness in the browser.

2. we will add some configuration options to our app.js, such that we can enable program features,
including showing the Saturday/Sunday selection checkboxes, as well as optionally displaying the sign-me-up-for-more- information textbox.

3. Not only that, using these new Hooks gives you the opportunity to just do better, more reliable programming because they give a richer set of features.


https://reactjs.org/blog/2018/03/29/react-v-16-3.html
you would've passed properties around your components up and down complex component trees. It was ugly.
It led to the design pattern commonly used known as prop drilling, and also to HOC, higher-order components,
to basically use class inheritance as a way to pass data around, equally ugly and troublesome.


https://reactjs.org/docs/context.html



























